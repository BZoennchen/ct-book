Traceback (most recent call last):
  File "/Users/bzoennchen/Development/workspaces/python3env/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/bzoennchen/Development/workspaces/python3env/lib/python3.9/site-packages/nbclient/client.py", line 1107, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/bzoennchen/Development/workspaces/python3env/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/bzoennchen/Development/workspaces/python3env/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.9/3.9.6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/Users/bzoennchen/Development/workspaces/python3env/lib/python3.9/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/Users/bzoennchen/Development/workspaces/python3env/lib/python3.9/site-packages/nbclient/client.py", line 852, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/bzoennchen/Development/workspaces/python3env/lib/python3.9/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
########### Diesen Code haben wir einfach kopiert ###########
def find_smallest_index(hand, is_smaller):
    index = 0                                
    for i in range(len(hand)):               
        if is_smaller(hand[i], hand[index]): 
            index = i
    return index

def remove_smallest_card(hand, is_smaller):
    i = find_smallest_index(hand, is_smaller)
    card = hand[i]
    del hand[i]
    return card

def stack_sort(hand, is_smaller):
    stack = [];                          
    while len(hand) > 0:                 
        card = remove_smallest_card(hand, is_smaller)
        stack.append(card)
    return stack

def index_of(card):
    cards = get_cards()
    for index in range(len(cards)):
        if cards[index] == card:
            return index
##################################################################

n = 10
keys = []
# 1. baue Liste aus keys
for key in word_frequency:
    keys.append(key)

# 2. sortiere keys wobei der Vergleichsoperator gleich der Vergleich der Werte ist.
keys = stack_sort(keys, lambda a, b: word_frequency[a] > word_frequency[b])

# 3. gebe die n h√§ufigsten keys/W√∂rter aus
keys[0:n]
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-1-80cf2f6aad6a>[0m in [0;36m<module>[0;34m[0m
[1;32m     30[0m [0mkeys[0m [0;34m=[0m [0;34m[[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m     31[0m [0;31m# 1. baue Liste aus keys[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 32[0;31m [0;32mfor[0m [0mkey[0m [0;32min[0m [0mword_frequency[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     33[0m     [0mkeys[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mkey[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     34[0m [0;34m[0m[0m

[0;31mNameError[0m: name 'word_frequency' is not defined
NameError: name 'word_frequency' is not defined

